export const markdownArray = [
  "Creating a TypeScript component for a Next.js application involves defining a functional component that utilizes TypeScript features for type checking. Here's a simple example of a TypeScript Next.js component that displays a greeting message:\r\n\r\n```typescript\r\n// components/Greeting.tsx\r\n\r\nimport React from 'react';\r\n\r\n// Define the props interface\r\ninterface GreetingProps {\r\n  name: string; // Expect a name prop of type string\r\n}\r\n\r\n// Functional component with props type defined\r\nconst Greeting: React.FC<GreetingProps> = ({ name }) => {\r\n  return (\r\n    <div>\r\n      <h1>Hello, {name}!</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Greeting;\r\n```\r\n\r\nThis component, named `Greeting`, takes a single prop `name` of type string. It returns a simple JSX that includes a greeting message that incorporates the `name` prop.\r\n\r\nTo use this component in a Next.js page, you can import it and pass the required props as follows:\r\n\r\n```typescript\r\n// pages/index.tsx\r\nimport type { NextPage } from 'next';\r\nimport Greeting from '../components/Greeting';\r\n\r\nconst Home: NextPage = () => {\r\n  return (\r\n    <div>\r\n      <Greeting name=\"John Doe\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n```\r\n\r\nThis example demonstrates how to define a simple TypeScript component in a Next.js application and use it within a page. The `Greeting` component is reusable and type-safe, ensuring that the `name` prop is always a string.\r\n"
];